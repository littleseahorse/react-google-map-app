{"version":3,"sources":["mapStyles.js","MapModal/MapModalFunctionComponent.js","App.js","reportWebVitals.js","index.js"],"names":["MapStyles","featureType","elementType","stylers","saturation","color","lightness","visibility","weight","MapModal","withScriptjs","withGoogleMap","useState","users","setUsers","clickedUser","setClickedUser","a","url","fetch","headers","then","response","json","data","catch","error","console","log","useEffect","fetchData","listener","e","keyCode","window","addEventListener","removeEventListener","defaultZoom","defaultCenter","lat","lng","defaultOptions","styles","map","user","position","parseFloat","address","geo","onClick","icon","scaledSize","google","maps","Size","id","onCloseClick","style","textAlign","company","name","catchPhrase","phone","href","website","App","className","width","height","googleMapURL","process","loadingElement","containerElement","mapElement","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b94f99ba.chunk.js","sourcesContent":["const MapStyles = [\n  {\n    featureType: 'all',\n    elementType: 'labels.text.fill',\n    stylers: [\n      {\n        saturation: 36,\n      },\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 40,\n      },\n    ],\n  },\n  {\n    featureType: 'all',\n    elementType: 'labels.text.stroke',\n    stylers: [\n      {\n        visibility: 'on',\n      },\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 16,\n      },\n    ],\n  },\n  {\n    featureType: 'all',\n    elementType: 'labels.icon',\n    stylers: [\n      {\n        visibility: 'off',\n      },\n    ],\n  },\n  {\n    featureType: 'administrative',\n    elementType: 'geometry.fill',\n    stylers: [\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 20,\n      },\n    ],\n  },\n  {\n    featureType: 'administrative',\n    elementType: 'geometry.stroke',\n    stylers: [\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 17,\n      },\n      {\n        weight: 1.2,\n      },\n    ],\n  },\n  {\n    featureType: 'landscape',\n    elementType: 'geometry',\n    stylers: [\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 20,\n      },\n    ],\n  },\n  {\n    featureType: 'poi',\n    elementType: 'geometry',\n    stylers: [\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 21,\n      },\n    ],\n  },\n  {\n    featureType: 'road.highway',\n    elementType: 'geometry.fill',\n    stylers: [\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 17,\n      },\n    ],\n  },\n  {\n    featureType: 'road.highway',\n    elementType: 'geometry.stroke',\n    stylers: [\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 29,\n      },\n      {\n        weight: 0.2,\n      },\n    ],\n  },\n  {\n    featureType: 'road.arterial',\n    elementType: 'geometry',\n    stylers: [\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 18,\n      },\n    ],\n  },\n  {\n    featureType: 'road.local',\n    elementType: 'geometry',\n    stylers: [\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 16,\n      },\n    ],\n  },\n  {\n    featureType: 'transit',\n    elementType: 'geometry',\n    stylers: [\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 19,\n      },\n    ],\n  },\n  {\n    featureType: 'water',\n    elementType: 'geometry',\n    stylers: [\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 17,\n      },\n    ],\n  },\n];\n\nexport default MapStyles;\n","import React, { useState, useEffect } from 'react';\nimport {\n  GoogleMap,\n  withScriptjs,\n  withGoogleMap,\n  Marker,\n  InfoWindow,\n} from 'react-google-maps';\n// import * as usersData from '../UsersData/data.json';\nimport MapStyles from '../mapStyles.js';\n\nconst Map = () => {\n  const [users, setUsers] = useState([]);\n  const [clickedUser, setClickedUser] = useState(null);\n\n  async function fetchData(url = '', data = {}) {\n    await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => setUsers(data))\n      .catch((error) => console.log(error));\n  }\n\n  useEffect(() => {\n    fetchData('https://jsonplaceholder.typicode.com/users');\n  }, []);\n\n  useEffect(() => {\n    const listener = (e) => {\n      if (e.keyCode === 27) {\n        setClickedUser(null);\n      }\n    };\n    window.addEventListener('keydown', listener);\n    return () => {\n      window.removeEventListener('keydown', listener);\n    };\n  }, []);\n\n  return (\n    <GoogleMap\n      defaultZoom={1}\n      defaultCenter={{\n        lat: 0,\n        lng: 0,\n      }}\n      defaultOptions={{ styles: MapStyles }}\n    >\n      {users.map((user) => (\n        <Marker\n          key={user.id}\n          position={{\n            lat: parseFloat(user.address.geo.lat),\n            lng: parseFloat(user.address.geo.lng),\n          }}\n          onClick={() => {\n            setClickedUser(user);\n          }}\n          icon={{\n            url: '/logo.svg',\n            scaledSize: new window.google.maps.Size(45, 45),\n          }}\n        />\n      ))}\n      {clickedUser && (\n        <InfoWindow\n          position={{\n            lat: parseFloat(clickedUser.address.geo.lat),\n            lng: parseFloat(clickedUser.address.geo.lng),\n          }}\n          onCloseClick={() => {\n            setClickedUser(null);\n          }}\n        >\n          <div style={{ textAlign: 'left' }}>\n            <h3>{clickedUser.company.name}</h3>\n            <p>\n              <i>Service:</i> {clickedUser.company.catchPhrase}\n            </p>\n            <p>\n              <i>Phone:</i> {clickedUser.phone}\n            </p>\n            <p>\n              <i>Webiste:</i>{' '}\n              <a href={'https://' + clickedUser.website}>\n                {clickedUser.website}\n              </a>\n            </p>\n          </div>\n        </InfoWindow>\n      )}\n    </GoogleMap>\n  );\n};\n\nconst MapModal = withScriptjs(withGoogleMap(Map));\n\nexport default MapModal;\n","import React, { Component } from 'react';\nimport './App.css';\n// import MapModal from './MapModal/MapModalClassComponent.js';\nimport MapModal from './MapModal/MapModalFunctionComponent.js';\n\nconst API_KEY = process.env.REACT_APP_GOOGLE_KEY;\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\" style={{ width: '100vw', height: '100vh' }}>\n        <MapModal\n          googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${API_KEY}`}\n          loadingElement={<div style={{ height: `100%` }} />}\n          containerElement={<div style={{ height: `100%` }} />}\n          mapElement={<div style={{ height: `100%` }} />}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
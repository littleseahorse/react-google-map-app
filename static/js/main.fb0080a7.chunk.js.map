{"version":3,"sources":["mapStyles.js","MapModal/MapModalClassComponent.js","App.js","reportWebVitals.js","index.js"],"names":["MapStyles","featureType","elementType","stylers","saturation","color","lightness","visibility","weight","Map","state","users","clickedUser","fetchData","a","url","fetch","headers","then","response","json","data","setState","catch","error","console","log","user","this","e","keyCode","document","addEventListener","escFunction","bind","removeEventListener","defaultZoom","defaultCenter","lat","lng","defaultOptions","styles","map","position","parseFloat","address","geo","onClick","setClickedUser","icon","scaledSize","window","google","maps","Size","id","onCloseClick","style","textAlign","company","name","catchPhrase","phone","href","website","Component","MapModal","withScriptjs","withGoogleMap","App","className","width","height","googleMapURL","process","loadingElement","containerElement","mapElement","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.fb0080a7.chunk.js","sourcesContent":["const MapStyles = [\n  {\n    featureType: 'all',\n    elementType: 'labels.text.fill',\n    stylers: [\n      {\n        saturation: 36,\n      },\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 40,\n      },\n    ],\n  },\n  {\n    featureType: 'all',\n    elementType: 'labels.text.stroke',\n    stylers: [\n      {\n        visibility: 'on',\n      },\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 16,\n      },\n    ],\n  },\n  {\n    featureType: 'all',\n    elementType: 'labels.icon',\n    stylers: [\n      {\n        visibility: 'off',\n      },\n    ],\n  },\n  {\n    featureType: 'administrative',\n    elementType: 'geometry.fill',\n    stylers: [\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 20,\n      },\n    ],\n  },\n  {\n    featureType: 'administrative',\n    elementType: 'geometry.stroke',\n    stylers: [\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 17,\n      },\n      {\n        weight: 1.2,\n      },\n    ],\n  },\n  {\n    featureType: 'landscape',\n    elementType: 'geometry',\n    stylers: [\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 20,\n      },\n    ],\n  },\n  {\n    featureType: 'poi',\n    elementType: 'geometry',\n    stylers: [\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 21,\n      },\n    ],\n  },\n  {\n    featureType: 'road.highway',\n    elementType: 'geometry.fill',\n    stylers: [\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 17,\n      },\n    ],\n  },\n  {\n    featureType: 'road.highway',\n    elementType: 'geometry.stroke',\n    stylers: [\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 29,\n      },\n      {\n        weight: 0.2,\n      },\n    ],\n  },\n  {\n    featureType: 'road.arterial',\n    elementType: 'geometry',\n    stylers: [\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 18,\n      },\n    ],\n  },\n  {\n    featureType: 'road.local',\n    elementType: 'geometry',\n    stylers: [\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 16,\n      },\n    ],\n  },\n  {\n    featureType: 'transit',\n    elementType: 'geometry',\n    stylers: [\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 19,\n      },\n    ],\n  },\n  {\n    featureType: 'water',\n    elementType: 'geometry',\n    stylers: [\n      {\n        color: '#000000',\n      },\n      {\n        lightness: 17,\n      },\n    ],\n  },\n];\n\nexport default MapStyles;\n","import React, { Component } from 'react';\nimport {\n  GoogleMap,\n  withScriptjs,\n  withGoogleMap,\n  Marker,\n  InfoWindow,\n} from 'react-google-maps';\n// import * as userData from '../UsersData/data.json';\nimport MapStyles from '../mapStyles.js';\n\nclass Map extends Component {\n  state = {\n    users: [],\n    clickedUser: null,\n  };\n\n  fetchData = async (url = '', data = {}) => {\n    await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => this.setState({ users: data }))\n      .catch((error) => console.log(error));\n  };\n\n  setClickedUser(user) {\n    this.setState({\n      clickedUser: user,\n    });\n  }\n\n  escFunction(e) {\n    if (e.keyCode === 27) {\n      this.setState({\n        clickedUser: null,\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.fetchData('https://jsonplaceholder.typicode.com/users');\n    document.addEventListener('keydown', this.escFunction.bind(this), false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.escFunction.bind(this), false);\n  }\n\n  render() {\n    return (\n      <GoogleMap\n        defaultZoom={1}\n        defaultCenter={{\n          lat: 0,\n          lng: 0,\n        }}\n        defaultOptions={{ styles: MapStyles }}\n      >\n        {this.state.users.map((user) => (\n          <Marker\n            key={user.id}\n            position={{\n              lat: parseFloat(user.address.geo.lat),\n              lng: parseFloat(user.address.geo.lng),\n            }}\n            onClick={() => this.setClickedUser(user)}\n            icon={{\n              url: 'logo.svg',\n              scaledSize: new window.google.maps.Size(45, 45),\n            }}\n          />\n        ))}\n        {this.state.clickedUser && (\n          <InfoWindow\n            position={{\n              lat: parseFloat(this.state.clickedUser.address.geo.lat),\n              lng: parseFloat(this.state.clickedUser.address.geo.lng),\n            }}\n            onCloseClick={() => {\n              this.setClickedUser(null);\n            }}\n          >\n            <div style={{ textAlign: 'left' }}>\n              <h3>{this.state.clickedUser.company.name}</h3>\n              <p>\n                <i>Service:</i> {this.state.clickedUser.company.catchPhrase}\n              </p>\n              <p>\n                <i>Phone:</i> {this.state.clickedUser.phone}\n              </p>\n              <p>\n                <i>Webiste:</i>{' '}\n                <a href={'https://' + this.state.clickedUser.website}>\n                  {this.state.clickedUser.website}\n                </a>\n              </p>\n            </div>\n          </InfoWindow>\n        )}\n      </GoogleMap>\n    );\n  }\n}\n\nconst MapModal = withScriptjs(withGoogleMap(Map));\n\nexport default MapModal;\n","import React, { Component } from 'react';\nimport './App.css';\nimport MapModal from './MapModal/MapModalClassComponent.js';\n// import MapModal from './MapModal/MapModalFunctionComponent.js';\n\nconst API_KEY = process.env.REACT_APP_GOOGLE_KEY;\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\" style={{ width: '100vw', height: '100vh' }}>\n        <MapModal\n          googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${API_KEY}`}\n          loadingElement={<div style={{ height: `100%` }} />}\n          containerElement={<div style={{ height: `100%` }} />}\n          mapElement={<div style={{ height: `100%` }} />}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}